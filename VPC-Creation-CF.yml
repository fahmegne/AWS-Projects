---
  AWSTemplateFormatVersion: 2010-09-09

  Description: This Template creates vpc with public and private subnets

  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        -
          Label:
            default: "VPC CIDR"
          Parameters:
            - VpcCIDR
        -
          Label:
            default: "Subnet CIDR"
          Parameters:
            - PublicSubnet1CIDR
            - PublicSubnet2CIDR
            - PrivateSubnet1CIDR
            - PrivateSubnet2CIDR

  Parameters:
    VpcCIDR:
     Default: 10.0.0.0/16
     Description: Please enter the IP Range for this VPC
     Type: String

    PublicSubnet1CIDR:
      Default: 10.0.0.0/24
      Description: Please enter the IP Range for the public subnet 1
      Type: String

    PublicSubnet2CIDR:
      Default: 10.0.1.0/24
      Description: Please enter the IP Range for the public subnet 2
      Type: String

    PrivateSubnet1CIDR:
      Default: 10.0.2.0/24
      Description: Please enter the IP Range for the private subnet 1
      Type: String

    PrivateSubnet2CIDR:
      Default: 10.0.3.0/24
      Description: Please enter the IP Range for the private subnet 2
      Type: String

    SSHLocation:
      AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
      Default: 0.0.0.0/0
      Description: The IP address range that can be used to access the web server using SSH.
      MaxLength: '18'
      MinLength: '9'
      Type: String

  Resources:
  #Create VPC
    MyVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsHostnames: true
        EnableDnsSupport: true
        InstanceTenancy: default
        Tags:
          - Key: Name
            Value: My VPC

  # Create Internet Gateway
    MyInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: My IGW

  # Attach Internet Gateway to VPC
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref MyInternetGateway
        VpcId: !Ref MyVPC

  # Create Public Subnet1
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: Public Subnet 1
        VpcId: !Ref  MyVPC

  # Create Public Subnet2
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet2CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: PublicSubnet2
        VpcId: !Ref MyVPC

  # Create Route Table
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        Tags:
          - Key: Name
            Value: Public Route Table
        VpcId: !Ref MyVPC

  # Add a Public Route to the Route Table
    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref MyInternetGateway
        RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet1 with Public Route Table
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

# Associate Public Subnet2 with Public Route Table
    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2

  # Create Private Subnet1
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnet1CIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: Private Subnet1
        VpcId: !Ref MyVPC

# Create Private Subnet2
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnet2CIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: Private Subnet2
        VpcId: !Ref MyVPC

  # Create Security Group for the Application Load Balancer
    ALBSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable HTTP/HTTPS access on port 80/443
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ALB Security Group
        VpcId: !Ref MyVPC

  # Create Security Group for the Web Server
    WebServerSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable HTTP/HTTPS  access on port 80/22 locked down to the load balancer
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref ALBSecurityGroup
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !Ref ALBSecurityGroup
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: Webserver Security Group
        VpcId: !Ref MyVPC


  Outputs:
  # Export VPC ID
    VPC:
      Description: VPC ID
      Export:
        Name: !Sub ${AWS::StackName}-VPC
      Value:  !Ref MyVPC

  # Export Public Subnet 1
    PublicSubnet1:
      Description: PublicSubnet1 ID
      Export:
        Name: !Sub ${AWS::StackName}-PublicSubnet1
      Value: !Ref PublicSubnet1

  # Export Public Subnet 2
    PublicSubnet2:
      Description: PublicSubnet2 ID
      Export:
        Name: !Sub ${AWS::StackName}-PublicSubnet2
      Value: !Ref PublicSubnet2

  # Export Private Subnet 1
    PrivateSubnet1:
      Description: PrivateSubnet1 ID
      Export:
        Name: !Sub ${AWS::StackName}-PrivateSubnet2
      Value: PrivateSubnet1

  # Export Private Subnet 2
    PrivateSubnet2:
      Description: PrivateSubnet2 ID
      Export:
        Name: !Sub ${AWS::StackName}-PrivateSubnet2-1
      Value: !Ref PrivateSubnet2

  # Export ALB Security Group ID
    ALBSecurityGroup:
      Description: ALBSecurityGroup ID
      Export:
        Name: !Sub ${AWS::StackName}-ALBSecurityGroup-1
      Value: !Ref ALBSecurityGroup

  # Export WebServer Security Group ID
    WebServerSecurityGroup:
      Description: WebServerSecurityGroup ID
      Export:
        Name: !Sub ${AWS::StackName}-ALBSecurityGroup
      Value: !Ref WebServerSecurityGroup